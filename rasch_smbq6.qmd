---
title: "SMBQ-6"
title-block-banner: "#870052"
title-block-banner-color: "#FFFFFF"
date: last-modified
date-format: iso
format: html
execute:
  echo: true
  warning: false
  message: false
  cache: true
editor_options: 
  markdown: 
    wrap: 72
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(janitor)
#library(skimr)
library(easyRasch)
library(haven)

### some commands exist in multiple packages, here we define preferred ones that are frequently used
select <- dplyr::select
count <- dplyr::count
recode <- car::recode
rename <- dplyr::rename

d.all <- read_spss("data/SUVRTW_LONG 240528 TOTAL.sav") 

d <- d.all %>% 
  select(starts_with("SMBQ"),time)

# subset and remove DIF variable(s)
dif.time <- d$time
d$time <- NULL

itemlabels <- read_csv("data/spss_labels.csv") %>% 
  filter(str_detect(itemnr,"SMBQ"))

```

## Background 

Since these items have 7 response categories we will use a stacked dataset to make sure we have enough responses in each response category.


### Descriptives

::: panel-tabset
#### Tile plot
```{r}
RItileplot(d)
```
#### Stacked bars
```{r}
RIbarstack(d)
```
#### Columns
```{r}
RIitemcols(na.omit(d))
```
#### Missing/item
```{r}
RImissing(d)
# n persons w missing
n_complete <- d %>% 
  na.omit() %>% 
  nrow()
```
`r n_complete/nrow(d)` of respondents have complete data (n = `r n_complete`). 
We will remove those with missing data
:::

```{r}
d <- d.all %>% 
  select(starts_with("SMBQ"),time,PID) %>% 
  na.omit()

# subset and remove DIF variable(s)
dif.time <- d$time
d$time <- NULL

# subset and remove ID variable
PID <- d$PID
d$PID <- NULL
```

::: panel-tabset
#### Tile plot
```{r}
RItileplot(d)
```
#### Stacked bars
```{r}
RIbarstack(d)
```
:::

We need to recode to make 0 the lowest response category.

```{r}
d <- d %>% 
  mutate(across(everything(), ~ .x - 1))
RItileplot(d)
```


## Rasch analysis 1

The eRm package, which uses Conditional Maximum Likelihood (CML)
estimation, will be used primarily. For this analysis, the Partial
Credit Model will be used.

```{r}
#| column: margin
#| echo: false
RIlistItemsMargin(d, fontsize = 13)
```

::: panel-tabset
### Conditional item fit
```{r}
simfit1 <- RIgetfit(d, iterations = 400, cpu = 8) 

RIitemfit(d, simfit1)
RIgetfitPlot(simfit1, d)
```
### Item-restscore
```{r}
RIrestscore(d)
```
### Item-restscore bootstrap
```{r}
RIbootRestscore(d, samplesize = 600, cpu = 8, iterations = 250)
```
### PCA
```{r}
#| tbl-cap: "PCA of Rasch model residuals"
RIpcmPCA(d)
```
### Residual correlations
```{r}
simcor1 <- RIgetResidCor(d, 500, 8)
RIresidcorr(d, cutoff = simcor1$p99)
```
### 1st contrast loadings
```{r}
RIloadLoc(d)
```
### ICC all items
```{r}
mirt(d, model=1, itemtype='Rasch', verbose = FALSE) %>% 
  plot(type="trace", as.table = TRUE, 
       theta_lim = c(-6,6))
```

### Targeting
```{r}
#| fig-height: 5
# increase fig-height above as needed, if you have many items
RItargeting(d)
```
### Item hierarchy
```{r}
#| fig-height: 5
RIitemHierarchy(d)
```
### DIF time
```{r}
RIdifTable(d, dif.time)
RIdifFigTime(d, dif.time) + coord_cartesian(ylim = c(-4,4))
```
:::

Response categories are surprisingly well-behaved.

We clearly have 2 dimensions in data, items 1-3 and 4-6 form separate clusters.

```{r}
d1 <- d %>% 
  select(SMBQ6_1,SMBQ6_2,SMBQ6_3)

d2 <- d %>% 
  select(SMBQ6_4,SMBQ6_5,SMBQ6_6)
```

## Dimension 1 - Physical fatigue

```{r}
#| column: margin
#| echo: false
RIlistItemsMargin(d1, fontsize = 13)
```

::: panel-tabset
### Item fit
```{r}
simfit <- RIgetfit(d1, 100, 8)
RIitemfit(d1,simfit)
```
### Item-restscore
```{r}
RIrestscore(d1)
```
### Item-restscore bootstrap
```{r}
RIbootRestscore(d1, iterations = 250, cpu = 8)
```
### PCA
```{r}
#| tbl-cap: "PCA of Rasch model residuals"
RIpcmPCA(d1)
```
### Residual correlations
```{r}
simcor <- RIgetResidCor(d1, 500, 8)
RIresidcorr(d1, cutoff = simcor$p999)
RIpartgamLD(d1)
```
### 1st contrast loadings
```{r}
RIloadLoc(d1)
```
### ICC all items
```{r}
mirt(d1, model=1, itemtype='Rasch', verbose = FALSE) %>% 
  plot(type="trace", as.table = TRUE, 
       theta_lim = c(-6,6))
```

### Targeting
```{r}
#| fig-height: 5
# increase fig-height above as needed, if you have many items
RItargeting(d1)
```
### Item hierarchy
```{r}
#| fig-height: 5
RIitemHierarchy(d1)
```
### DIF time
```{r}
RIdifTable(d1, dif.time)
RIdifFigTime(d1, dif.time) + coord_cartesian(ylim = c(-4,4))
partgam_DIF(as.data.frame(d1),dif.time)
```
### Reliability
```{r}
RItif(d1, samplePSI = TRUE)
```
:::

Item 3 is overfit

Items 1 and 3 show a residual correlation between them.

- SMBQ6_1 "Jag känner mig fysiskt utmattad"              
- SMBQ6_3 "Jag känner mig utbränd"   

Should we remove item 2 or item 3?

- SMBQ6_2 Jag känner att jag har fått nog              
```{r}
d1[,-2] %>% RIrestscore()
d1[,-2] %>% RItif(samplePSI = T)
d1[,-2] %>% RItargeting()
```

PSI 0.72

Removing item 3 instead:

```{r}
d1[,-3] %>% RIrestscore()
d1[,-3] %>% RItif(samplePSI = T)
d1[,-3] %>% RItargeting()
```

PSI 0.61 (worse spread of thresholds for item 2)

Removing item 2 worked better.

## Dimension 2 - Cognitive weariness

```{r}
#| column: margin
#| echo: false
RIlistItemsMargin(d2, fontsize = 13)
```

::: panel-tabset
### Item fit
```{r}
simfit <- RIgetfit(d2, 400, 8)
RIitemfit(d2,simfit)
```
### Item-restscore
```{r}
RIrestscore(d2)
```
### Item-restscore bootstrap
```{r}
RIbootRestscore(d2, iterations = 250, cpu = 8)
```
### PCA
```{r}
#| tbl-cap: "PCA of Rasch model residuals"
RIpcmPCA(d2)
```
### Residual correlations
```{r}
simcor <- RIgetResidCor(d2, 500, 8)
RIresidcorr(d2, cutoff = simcor$p99)
RIpartgamLD(as.data.frame(d2))
```
### 1st contrast loadings
```{r}
RIloadLoc(d2)
```
### ICC all items
```{r}
mirt(d2, model=1, itemtype='Rasch', verbose = FALSE) %>% 
  plot(type="trace", as.table = TRUE, 
       theta_lim = c(-6,6))
```

### Targeting
```{r}
#| fig-height: 5
# increase fig-height above as needed, if you have many items
RItargeting(d2)
```
### Item hierarchy
```{r}
#| fig-height: 5
RIitemHierarchy(d2)
```
### DIF time
```{r}
RIdifTable(d2, dif.time)
RIdifFigTime(d2, dif.time) + coord_cartesian(ylim = c(-4,4))
partgam_DIF(as.data.frame(d2),dif.time)
```
### Reliability
```{r}
RItif(d2, samplePSI = TRUE)
pcm <- PCM(d2)
ppar <- person.parameter(pcm)
eRm::SepRel(ppar)
```
:::

We again have a residual correlation, between items 4 and 5

- SMBQ6_4 Jag känner mig trögtänkt                     
- SMBQ6_5 Jag kan inte tänka klart                     
- SMBQ6_6 Jag har svårt att tänka på komplicerade saker

Let's try removing item 6.

```{r}
d2[,-3] %>% RIrestscore()
d2[,-3] %>% RItif(samplePSI = T)
d2[,-3] %>% RItargeting()
```

PSI 0.88(!).

Removing item 4

```{r}
d2[,-1] %>% RIrestscore()
d2[,-1] %>% RItif(samplePSI = T)
d2[,-1] %>% RItargeting()
```

PSI 0.86

Removing item 5

```{r}
d2[,-2] %>% RIrestscore()
d2[,-2] %>% RItif(samplePSI = T)
d2[,-2] %>% RItargeting()
```

PSI 0.84

## Item parameters

### d1

```{r}
RIitemparams(d1[,-2] %>% na.omit(), output = "file", filename = "SMBQ_d1.csv")
RIscoreSE(d1[,-2])
```

### d2

```{r}
RIitemparams(d2[,-3] %>% na.omit(), output = "file", filename = "SMBQ_d2.csv")
RIscoreSE(d2[,-3])
```


## Latent score

```{r}
items1 <- RIitemparams(d1[,-2], output = "dataframe") %>% 
  select(!Location) %>% 
  as.matrix()
scores <- RIestThetasCATr(d1[,-2], items1, theta_range = c(-8,8))
hist(scores)
summary(scores)

data.frame(PID = PID,
           time = dif.time,
           SMBQd1_score = scores) %>% 
  write_csv("SMBQd1_score.csv")

```

```{r}
items2 <- RIitemparams(d2[,-3], output = "dataframe") %>% 
  select(!Location) %>% 
  as.matrix()
scores <- RIestThetasCATr(d2[,-3], items2, theta_range = c(-8,10))
hist(scores)
summary(scores)

data.frame(PID = PID,
           time = dif.time,
           SMBQd2_score = scores) %>% 
  write_csv("SMBQd2_score.csv")

```
